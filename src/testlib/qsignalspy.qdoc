/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in a
** written agreement between you and Nokia.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*! 
    \class QSignalSpy
    \inmodule QtTest

    \brief The QSignalSpy class enables introspection of signal emission.

    QSignalSpy can connect to any signal of any object and records its emission.
    QSignalSpy itself is a list of QVariant lists. Each emission of the signal
    will append one item to the list, containing the arguments of the signal.

    The following example records all signal emissions for the \c clicked() signal
    of a QCheckBox:

    \snippet doc/src/snippets/code/doc_src_qsignalspy.qdoc 0

    \c{spy.takeFirst()} returns the arguments for the first emitted signal, as a
    list of QVariant objects. The \c clicked() signal has a single bool argument,
    which is stored as the first entry in the list of arguments.

    The example below catches a signal from a custom object:

    \snippet doc/src/snippets/code/doc_src_qsignalspy.qdoc 1

    \bold {Note:} Non-standard data types need to be registered, using
    the qRegisterMetaType() function, before you can create a
    QSignalSpy. For example:

    \snippet doc/src/snippets/code/doc_src_qsignalspy.qdoc 2

    To retrieve the \c QModelIndex, you can use qvariant_cast:

    \snippet doc/src/snippets/code/doc_src_qsignalspy.qdoc 3
 */

/*! \fn QSignalSpy::QSignalSpy(QObject *object, const char *signal)

    Constructs a new QSignalSpy that listens for emissions of the \a signal
    from the QObject \a object. Neither \a signal nor \a object can be null.

    Example:
    \snippet doc/src/snippets/code/doc_src_qsignalspy.qdoc 4
*/

/*! \fn QSignalSpy::isValid() const

    Returns true if the signal spy listens to a valid signal, otherwise false.
*/

/*! \fn QSignalSpy::signal() const

    Returns the normalized signal the spy is currently listening to.
*/

/*! \fn int QSignalSpy::qt_metacall(QMetaObject::Call call, int id, void **a)
    \internal
*/

