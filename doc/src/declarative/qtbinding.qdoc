/****************************************************************************
**
** Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
** All rights reserved.
** Contact: Nokia Corporation (qt-info@nokia.com)
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial Usage
** Licensees holding valid Qt Commercial licenses may use this file in
** accordance with the Qt Commercial License Agreement provided with the
** Software or, alternatively, in accordance with the terms contained in a
** written agreement between you and Nokia.
**
** GNU Free Documentation License
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of this
** file.
**
** If you have questions regarding the use of this file, please contact
** Nokia at qt-info@nokia.com.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
\page qtbinding.html
\target qtbinding
\title Using QML in C++ Applications

\tableofcontents

The QML API is split into three main classes - QDeclarativeEngine, QDeclarativeComponent and QDeclarativeContext.  
QDeclarativeEngine provides the environment in which QML is run, QDeclarativeComponent encapsulates 
\l {QML Documents}, and QDeclarativeContext allows applications to expose data to QML component instances.

QML also includes a convenience API, QDeclarativeView, for applications that simply want to embed QML
components into a new QGraphicsView.  QDeclarativeView covers up many of the details discussed below.  
While QDeclarativeView is mainly intended for rapid prototyping it can have uses in production applications.

If you are looking at retrofitting an existing Qt application with QML,
read \l{Integrating QML with existing Qt UI code}.
\section1 Basic Usage

Every application requires at least one QDeclarativeEngine.  A QDeclarativeEngine allows the configuration of
global settings that apply to all the QML component instances - such as the QNetworkAccessManager
that is used for network communications, and the path used for persistent storage.  
Multiple QDeclarativeEngine's are only needed if the application requires these settings to differ 
between QML component instances.

\l {QML Documents} are loaded using the QDeclarativeComponent class.  Each QDeclarativeComponent instance 
represents a single QML document.  A QDeclarativeComponent can be passed a document URL, or raw text
representing the content of the document.  The document URL can be a local filesystem URL, or
any network URL supported by QNetworkAccessManager.

QML component instances can then be created by calling the QDeclarativeComponent::create() method.  Here's
an example of loading a QML document, and creating an object from it.

\code
    QDeclarativeEngine *engine = new QDeclarativeEngine(parent);
    QDeclarativeComponent component(engine, QUrl::fromLocalFile("main.qml"));
    QObject *myObject = component.create();
\endcode

\section1 Exposing Data

QML components are instantiated in a QDeclarativeContext.  A context allows the application to expose data
to the QML component instance.  A single QDeclarativeContext can be used to instantiate all the objects
used by an application, or several QDeclarativeContext can be created for more fine grained control over
the data exposed to each instance.  If a context is not passed to the QDeclarativeComponent::create()
method, the QDeclarativeEngine's \l {QDeclarativeEngine::rootContext()}{root context} is used.  Data exposed through
the root context is available to all object instances.

\section1 Simple Data

To expose data to a QML component instance, applications set \l {QDeclarativeContext::setContextProperty()}
{context properties} which are then accessible by name from QML  \l {Property Binding}s and JavaScript.
The following example shows how to expose a background color to a QML file through QDeclarativeView:

\table
\row
\o
\c {// main.cpp}
\snippet doc/src/snippets/declarative/qtbinding/contextproperties/main.cpp 0

\o
\c {// main.qml}
\snippet doc/src/snippets/declarative/qtbinding/contextproperties/main.qml 0

\endtable

Or, if you want \c main.cpp to create the component without showing it in a QDeclarativeView, you could create an instance of QDeclarativeContext using QDeclarativeEngine::rootContext() instead:

\snippet doc/src/snippets/declarative/qtbinding/contextproperties/main.cpp 1

Context properties work just like normal properties in QML bindings - if the \c backgroundColor
context property in this example was changed to red, the component object instances would
all be automatically updated.  Note that it is the responsibility of the creator to delete any
QDeclarativeContext it constructs.  If the \c windowContext is no longer needed when
the \c window component instantiation is destroyed, the \c windowContext must be destroyed
explicitly.  The simplest way to ensure this is to set \c window as \c windowContext's parent.

QDeclarativeContexts form a tree - each QDeclarativeContext except for the root context has a parent.  Child 
QDeclarativeContexts effectively inherit the context properties present in their parents.  This gives
applications more freedom in partitioning the data exposed to different QML object instances.  
If a QDeclarativeContext sets a context property that is also set in one of its parents, the new context
property shadows that in the parent.  In The following example, the \c background context property
in \c {Context 1} shadows the \c background context property in the root context.

\image qml-context-tree.png

\section2 Structured Data

Context properties can also be used to expose structured and writable data to QML objects.  In 
addition to all the types already supported by QVariant, QObject derived types can be assigned to
context properties.  QObject context properties allow the data exposed to be more structured, and
allow QML to set values.

The following example creates a \c CustomPalette object, and sets it as the \c palette context
property.

\snippet doc/src/snippets/declarative/qtbinding/custompalette/custompalette.h 0

\snippet doc/src/snippets/declarative/qtbinding/custompalette/main.cpp 0

The QML that follows references the palette object, and its properties, to set the appropriate
background and text colors.  When the window is clicked, the palette's text color is changed, and
the window text will update accordingly.

\snippet doc/src/snippets/declarative/qtbinding/custompalette/main.qml 0

To detect when a C++ property value - in this case the \c CustomPalette's \c text property - 
changes, the property must have a corresponding NOTIFY signal.  The NOTIFY signal specifies a signal
that is emitted whenever the property changes value.  Implementers should take care to only emit the
signal if the value \e changes to prevent loops from occuring.  Accessing a property from a 
binding that does not have a NOTIFY signal will cause QML to issue a warning at runtime.

\section2 Dynamic Structured Data

If an application is too dynamic to structure data as compile-time QObject types, dynamically
structured data can be constructed at runtime using the QDeclarativePropertyMap class.


\section1 Calling C++ methods from QML

It is possible to call methods of QObject derived types by either exposing the
methods as public slots, or by marking the methods Q_INVOKABLE.

The C++ methods can also have parameters and return values.  QML has support for
the following types:

\list
\o bool
\o unsigned int, int
\o float, double, qreal
\o QString
\o QUrl
\o QColor
\o QDate, QTime, QDateTime
\o QPoint, QPointF
\o QSize, QSizeF
\o QRect, QRectF
\o QVariant
\endlist

This example toggles the "Stopwatch" object on/off when the MouseArea is clicked:

\table
\row
\o
\c {// main.cpp}
\snippet doc/src/snippets/declarative/qtbinding/stopwatch/stopwatch.h 0
\snippet doc/src/snippets/declarative/qtbinding/stopwatch/main.cpp 0

\o
\c {// main.qml}
\snippet doc/src/snippets/declarative/qtbinding/stopwatch/main.qml 0

\endtable

Note that in this particular example a better way to achieve the same result
is to have a "running" property in \c main.qml.  This leads to much nicer QML code:

\table
\row
\o
\code
// main.qml
import Qt 4.7

Rectangle {
    MouseArea {
        anchors.fill: parent
        onClicked: stopwatch.running = !stopwatch.running
    }
}
\endcode
\endtable

Of course, it is also possible to call \l {Adding new methods}{functions declared in QML from C++}.


\section1 Network Components

If the URL passed to QDeclarativeComponent is a network resource, or if the QML document references a
network resource, the QDeclarativeComponent has to fetch the network data before it is able to create
objects.  In this case, the QDeclarativeComponent will have a \l {QDeclarativeComponent::Loading}{Loading}
\l {QDeclarativeComponent::status()}{status}.  An application will have to wait until the component
is \l {QDeclarativeComponent::Ready}{Ready} before calling \l {QDeclarativeComponent::create()}.

The following example shows how to load a QML file from a network resource.  After creating
the QDeclarativeComponent, it tests whether the component is loading.  If it is, it connects to the
QDeclarativeComponent::statusChanged() signal and otherwise calls the \c {continueLoading()} method
directly.  This test is necessary, even for URLs that are known to be remote, just in case
the component has been cached and is ready immediately.

\code
MyApplication::MyApplication()
{
    // ...
    component = new QDeclarativeComponent(engine, QUrl("http://www.example.com/main.qml"));
    if (component->isLoading())
        QObject::connect(component, SIGNAL(statusChanged(QDeclarativeComponent::Status)),
                         this, SLOT(continueLoading()));
    else
        continueLoading();
}

void MyApplication::continueLoading()
{
    if (component->isError()) {
        qWarning() << component->errors();
    } else {
        QObject *myObject = component->create();
    }
}
\endcode

\section1 Qt Resources

QML content can be loaded from \l {The Qt Resource System} using the \e qrc: URL scheme.
For example:

\c [project/example.qrc]
\quotefile doc/src/snippets/declarative/qtbinding/resources/example.qrc 

\c [project/project.pro]
\quotefile doc/src/snippets/declarative/qtbinding/resources/resources.pro 

\c [project/main.cpp]
\snippet doc/src/snippets/declarative/qtbinding/resources/main.cpp 0

\c [project/main.qml]
\snippet doc/src/snippets/declarative/qtbinding/resources/main.qml 0

Note that the resource system cannot be accessed from QML directly. If the main QML file is
loaded as a resource, all files specifed as relative paths in QML will also be loaded from
the resource system. Using the resource system is completely transparent to the QML layer.
This also means that if the main QML file is not loaded as a resource then files in the resource
system cannot be accessed from QML.
*/

